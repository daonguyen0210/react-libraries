{"version":3,"sources":["reportWebVitals.js","components/counter.jsx","components/counters.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Counter","state","count","props","value","tags","imageUrl","styles","fontSize","fontWeight","color","handleIncreament","setState","console","log","this","id","className","onClick","classes","length","map","val","Component","Counters","counters","counter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kDCmICQ,E,4MAlIXC,MAAQ,CACJC,MAAO,EAAKC,MAAMC,MAElBC,KAAM,CAAC,OAAQ,OAAQ,QAEvBC,SAAW,6B,EAiFfC,OAAS,CACLC,SAAU,GACVC,WAAY,OACZC,MAAO,W,EAkCXC,iBAAmB,SAACP,GAChB,EAAKQ,SAAU,CAAEV,MAAO,EAAKD,MAAMC,MAAQ,IAC3CW,QAAQC,IAAK,2BAAb,gBACAD,QAAQC,IAAR,kBAAwBV,K,4CA5G5B,WAAU,IAAD,OAKL,OAFAS,QAAQC,IAAI,QAASC,KAAKZ,OAkDtB,cA/CA,CA+CA,iBAEI,gDAAoBY,KAAKZ,MAAMa,MAC/B,sBAAMC,UAAU,QAAhB,SAA0BF,KAAKd,MAAMC,QACrC,wBAAQgB,QAAU,kBAAM,EAAKP,iBAAkB,EAAKV,MAAMC,QAAQe,UAAU,2BAA5E,6B,6BAiBZ,WACI,IAAIE,EAAU,mBAEd,OADAA,GAAgC,IAArBJ,KAAKd,MAAMC,MAAc,UAAY,Y,yBAKpD,WACI,OAA4B,IAArBa,KAAKd,MAAMC,MAAc,OAAS,S,wBAM7C,WACI,OAA+B,IAA3Ba,KAAKd,MAAMI,KAAKe,OAAqB,iDAEjC,6BAAKL,KAAKd,MAAMI,KAAKgB,KAAI,SAAAC,GAAG,OAAI,6BAAeA,GAANA,Y,GA/GnCC,aCuBPC,E,4MAzBXvB,MAAQ,CACJwB,SAAU,CACN,CAAET,GAAI,EAAGZ,MAAO,GAChB,CAAEY,GAAI,EAAGZ,MAAO,GAChB,CAAEY,GAAI,EAAGZ,MAAO,GAChB,CAAEY,GAAI,EAAGZ,MAAO,K,4CAKxB,WAEI,OACI,8BAGMW,KAAKd,MAAMwB,SAASJ,KAAK,SAAAK,GAAO,OAAI,cAAC,EAAD,CAA0BtB,MAAOsB,EAAQtB,MAAOY,GAAIU,EAAQV,GAA5D,SAClC,gDADgDU,EAAQV,a,GAjBrDO,aCMvBI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BxC,M","file":"static/js/main.1a872734.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n// import \\functions, component\\ from \\library, file, folder\\\r\nimport React, { Component } from 'react';\r\n\r\n\r\n// A component can be defined as a reusable block of code that divides the user interface into smaller parts.\r\nclass Counter extends Component {\r\n    //state is a special property in React to include any data what this Component needs\r\n    state = {\r\n        count: this.props.value,\r\n\r\n        tags: ['tag1', 'tag2', 'tag3'],\r\n        // setting attributes as static\r\n        imageUrl:  'https://picsum.photos/200',\r\n    };\r\n\r\n\r\n    // this method constructor will be involked when the class is created\r\n    // constructor function is involked to create value what are parameters\r\n    // constructor () {\r\n    //     super();\r\n    //     // An object to which the this keyword can refer inside the new function.\r\n        \r\n    // }\r\n\r\n\r\n    render() { \r\n\r\n\r\n        console.log('props', this.props);\r\n        // Render is used to return the HTML you want to display in a component.\r\n        return (  \r\n            // // // JSX expressions are just like normal JS objects \r\n            // // <div>\r\n            // //     <h1>hello world</h1>\r\n            // //     <h2>{this.state.count}</h2>\r\n            // //     <h2>{this.formatCount()}</h2>\r\n            // //     <button className={ classes} style={ {fontSize: 30, color: '#dd9f0a'}}>increament</button>\r\n\r\n            // //     {/* setting attribute  */}\r\n            // //     <img src={this.state.imageUrl} />\r\n            // //     {/* the class is keyword used in JSX, to set attribute class, it will be className */}\r\n            // //     {/* m-2: margin: 2rem */}\r\n            // //     <button className=\"badge badge-warning m-2\" style={ this.styles}>Button className</button>\r\n            // //     <button id=\"hello\" style={ { fontSize: 30, fontWeight: 'lighter', color: '#dd4d87'}}>Button id</button>\r\n            // // </div>\r\n\r\n            // // Rendering Lists\r\n            // <div>\r\n            //     <span className={ this.getBadgeClasses()}>{ this.formatCount()}</span>\r\n            //     <button className=\"btn btn-secondary btn-sm\">Increment</button>\r\n            //     <ul>\r\n            //         {this.state.tags.map(val => <li key={val}>{val}</li>)}\r\n            //     </ul>\r\n            // </div>\r\n\r\n            // // conditional rendering\r\n            // <div>\r\n            //     { this.state.tags.length === 0 && 'Please create a new tag'};\r\n            //     { this.renderTags()};\r\n            // </div>\r\n\r\n            // // handle event\r\n            // <div>\r\n            //     <button onClick={ this.handleIncreament} className=\"btn btn-secondary btn-sm\">Increament</button>\r\n            // </div>\r\n\r\n\r\n            // binding event handle\r\n            // The event binding allows you to add an event handler for a specified event so that your chosen JavaScript function will be invoked when that event is triggered for the associated DOM element.\r\n            // if the function will be involked by method such as object.method() so the 'this' will reference to the object. But when the function will be involked and not reference to object it will referce to window object without 'strict mode'\r\n\r\n            // we can use constructor function to bind the function to object such as:\r\n                // ràng buộc method vào object, cái\r\n                // constructor () {\r\n                    // this.handleIncreament = this.handleIncreament.bind(this);\r\n                // }\r\n\r\n                \r\n            <div>\r\n                {/* call handleIncreament function */}\r\n                <h3>id component: { this.props.id}</h3>\r\n                <span className=\"hello\">{ this.state.count}</span>\r\n                <button onClick={ () => this.handleIncreament( this.state.count)} className=\"btn btn-secondary btn-sm\">Increament</button>\r\n            </div>\r\n  \r\n            // what happens when State changes\r\n            /*Cause the State is acsynochonism so it is not immidiately updated, but when the fucntion call it is done excution, so when the State change, the render will reliase which element changed, and update it to real DOM*/ \r\n             \r\n        );\r\n    }\r\n\r\n\r\n\r\n    styles = {\r\n        fontSize: 30, //it will be 10px\r\n        fontWeight: \"bold\",\r\n        color: 'crimson',\r\n    }\r\n\r\n    getBadgeClasses() {\r\n        let classes = 'badge m-2 badge-';\r\n        classes += this.state.count === 0 ? 'warning' : 'primary';\r\n        return classes;\r\n    }\r\n\r\n    // method of class component\r\n    formatCount() {\r\n        return this.state.count === 0 ? 'Zero' : 'More';\r\n    }\r\n\r\n    \r\n\r\n    // conditional rendering: because the rendering doesnot have conditional if-else like Angular, but to can use conditional rendering \r\n    renderTags() {\r\n        if( this.state.tags.length === 0) return <p>There is no tags</p>;\r\n\r\n        return  <ul>{this.state.tags.map(val => <li key={val}>{val}</li>)}</ul>;\r\n    }\r\n\r\n\r\n\r\n    // handleIncreament() {\r\n    //     // updating the state\r\n    //     // when access the property of set we only can read-only\r\n    //     // this.state.count ++; => will be error\r\n    //     // this.setState( { count: this.state.count + 1});\r\n    //     console.log( 'handle increament button', this);\r\n    // }\r\n\r\n    // bind the event handler by arrow function:\r\n    handleIncreament = (value) => {\r\n        this.setState( { count: this.state.count + 1});\r\n        console.log( 'handle increament button', this);\r\n        console.log( `vale is ${value}`);\r\n    } \r\n}\r\n \r\nexport default Counter;\r\n\r\n\r\n ","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n    state = {\r\n        counters: [\r\n            { id: 1, value: 0},\r\n            { id: 2, value: 0},\r\n            { id: 3, value: 0},\r\n            { id: 4, value: 0}\r\n        ]\r\n    };\r\n\r\n    // render() function is used to update the UI. For this, you have to create a new element and send it to ReactDOM.render()\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {/*  The term \"props\" stands for \"properties\" and is used for passing data from one component to another. As opposed to state in React, props are read-only. So, the data coming from a parent component can't be changed by the child component. */}\r\n\r\n                { this.state.counters.map( counter => <Counter key={counter.id} value={counter.value} id={counter.id}>\r\n                    <h3>Counter Child</h3>\r\n                </Counter>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Counters;","// import OBJECT from MODULE\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Counters from './components/counters';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Counters />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}